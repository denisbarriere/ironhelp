<div id="posts" class="is-hidden">

    <section v-if="isAdmin" class="hero is-primary">
    
        <%- include('./partials/hero/admin') %>

    </section>

    <section v-else-if="isProfile" class="hero is-primary">
    
        <%- include('./partials/hero/profile') %>

    </section>

    <section v-else class="hero is-primary">
        <div class="hero-body">
            <div class="container">
                <div class="columns is-vcentered">
                    <div class="column">
                        <h1 class="title is-1">
                            {{ title }}
                        </h1>
                        <p class="subtitle">
                            Working together as a community to build the best reference material for developer tools on the internet.
                            <br>
                            <strong>Choose a tool that's f-ing with you</strong>
                        </p>
                    </div>
                    <div v-if="toolImageUrl" class="column is-narrow carbon">
                        <figure class="media-left">
                            <p class="image is-128x128">
                                <img :src="toolImageUrl">
                            </p>
                        </figure>
                    </div>
                </div>
            </div>
        </div>
    </section>

    <section class="section">
        <div class="container">
             <h1 v-if="isProfile" class="title">
                Your Posts
              <a @click="addPost()" class="button is-outlined is-pulled-right">
                <span class="icon is-small">
                    <i class="fa fa-plus"></i>
                </span>
                <span>Add Post</span>
            </a>
            </h1>

            <div id="posts-tools">

                <a @click="refresh('Gotcha')"><span class="tag is-medium" :class="getSelectedStyles('Gotcha')">Gotcha</span></a>
                <a @click="refresh('Awesome')"><span class="tag is-medium" :class="getSelectedStyles('Awesome')">Awesome</span></a>
                <a @click="refresh('Doc')"><span class="tag is-medium" :class="getSelectedStyles('Doc')">Doc</span></a>

                <ul>
                    <li v-for="post in viewPosts">
                        <div class="card post is-paddingless" :class="getPostStyles(post)">

                            <div class="card-content">
                                <div class="media">
                                    <div class="media-left">
                                        <figure class="image is-48x48">
                                            <img :src="post.user ? post.user.imageUrl : ''" alt="Image">
                                        </figure>
                                    </div>
                                    <div class="media-content">
                                        <p class="title is-4">{{ post.summary }}</p>
                                        <p class="subtitle is-6">{{ post.user ? post.user.username : '' }}</p>
                                        <p>{{ post.category.name }}</p>
                                        <p>{{ post.tool.name }}</p>
                                    </div>
                                    <div v-if="user && user.role === 'ADMIN'" class="admin-controls">
                                        <div class="media-right">
                                            <span class="icon is-medium">
                    <i class="fa fa-pencil-square"></i>
                </span>
                                        </div>
                                        <div class="media-right">
                                            <span class="icon is-medium">
                    <i class="fa fa-times-circle"></i>
                </span>
                                        </div>
                                    </div>
                                </div>
                            </div>

                            <!-- Card content / description -->
                            <div class="card-content is-paddingless">
                                <div class="content description">
                                    <div v-if="!isExpanded(post._id)" class="expander" :class="getPostStyles(post)" @click.stop="expand(post._id)">
                                        <span class="icon is-large">
                    <i class="fa fa-angle-down"></i>
                </span>
                                    </div>
                                    <!-- <transition name="slide"> -->
                                    <div v-else class="media-content">
                                        <div class="content section">
                                            {{ post.content }}
                                        </div>
                                        <div class="expander" :class="getPostStyles(post)" @click.stop="shrink(post._id)">
                                            <span class="icon is-large">
                    <i class="fa fa-angle-up"></i>
                </span>
                                        </div>
                                    </div>
                                    <!-- </transition> -->

                                </div>
                            </div>



                        </div>
                    </li>
                </ul>
            </div>
        </div>
</div>
</div>

<script>
    new Vue({
        el: '#posts',
        data: {
            message: 'foo',
            posts: [],
            viewPosts: [],
            user: undefined,
            expandedPosts: {},
            toolID: undefined,
            inactiveCategories: [],
        },
        methods: {

            addPost: function () {

                let url = '/profile/post/new';

                if (location.href.indexOf('/admin/') > -1) {
                    url = '/admin/post/new';
                }

                location = url;
            },

            expand: function (id) {
                this.expandedPosts[id] = true;
                this.expandedPosts = Object.assign({}, this.expandedPosts);
            },

            shrink: function (id) {
                this.expandedPosts[id] = false;
                this.expandedPosts = Object.assign({}, this.expandedPosts);
            },

            isExpanded: function (id) {
                return this.expandedPosts[id];
            },

            refresh: function (category) {

                if (category) {

                    let pos = this.inactiveCategories.indexOf(category);

                    if (pos === -1) {
                        this.inactiveCategories.push(category);
                    } else {
                        this.inactiveCategories.splice(pos, 1);
                    }
                }
                
                this.viewPosts = this.posts.filter(post => {

                    return post.category && this.inactiveCategories.indexOf(post.category.name) === -1;

                });
            },

            getTabClasses: function (category) {

                let tabClasses = [];

                if (location.href.indexOf(`/${category}`) > -1) {
                    tabClasses = ['is-active'];
                }

                return tabClasses;
            },

            getPostStyles: function(post) {

                return [post.category.name.toLowerCase()];
            },

            getSelectedStyles: function(category) {

                // let classes = {
                //     'Gotcha' :  'is-danger',
                //     'Awesome' : 'is-success',
                //     'Doc' : 'is-warning'
                // };

                if (this.inactiveCategories.indexOf(category) > -1) {
                    return ['is-light'];
                } else {
                    return [category.toLowerCase()];
                }
                
            }

            
        },

        computed: {

            isAdmin: function () {

                return location.href.indexOf('/admin/') > -1; //this.user && this.user.role === 'ADMIN';
            },

            isProfile: function () {

                return location.href.indexOf('/profile/') > -1; //this.user && this.user.role === 'ADMIN';
            },

            title: function () {

                let title;

                if (this.posts.length === 0) {

                    title = 'No posts :(';

                } else if (this.toolID) {

                    title = this.posts[0].tool.name;

                } else if (this.user) {
                    if (this.isAdmin) {
                        title = 'Fancy Admin!';
                    } else {
                        title = 'Humble user';
                    }
                } else {

                    title = 'Puny guest'
                }

                return title;
            },

            toolImageUrl: function () {

                let url = undefined;

                if (this.toolID && this.posts.length > 0) {
                    url = this.posts[0].tool.imageUrl;
                }

                return url;
            }
        },

        created: function () {

            let url = '/api/posts';

            if (location.href.indexOf('/tool/') > -1) {
                this.toolID = location.href.split('/').pop();
            }

            if (this.toolID) {
                url += '/tool/' + this.toolID;
            } else if (location.href.indexOf('/profile/') > -1) {
                url += '/user';
            }
            axios
                .get(url)
                .then(response => {
                    this.posts = response.data.posts;
                    this.user = response.data.loggedIn;
                    this.refresh();
                    this.$el.classList.remove('is-hidden');
                })
        }

    })

</script>